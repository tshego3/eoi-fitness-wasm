@page "/workout/{title}/{Id:int}"
@using Newtonsoft.Json
@using Recurop
@inject HttpClient Http
@inject RecurringOperationsManager Recurop
@implements IDisposable

<PageTitle>Workout</PageTitle>

@if (_Workout == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col">
            <div class="row">
                <div class="col">
                    <h3><b>@_Workout.Title</b></h3>
                </div>
                <div class="col">
                    <h3><b>@_Timer</b></h3>
                </div>
            </div>
            <div class="row">
                <div class="col">
                    <h5><b>Selected Exercise:</b> @_Exercise.Name</h5>
                    <div class="row">
                        <div class="col">
                            <h5><b>Sets:</b> @_Exercise.Sets</h5>
                        </div>
                        <div class="col">
                            <h5><b>Reps:</b> @_Exercise.Reps</h5>
                        </div>
                    </div>
                </div>
            </div>
            <div class="row">
                <RadzenRadialGauge>
                    <RadzenRadialGaugeScale StartAngle="-150" EndAngle="150" Step="1" Min="0" Max="@(_Exercise.Duration.Seconds == 0 ? 1D : _Exercise.Duration.Seconds)" TickPosition=@tickPosition>
                        <RadzenRadialGaugeScalePointer Value=RadzenRadialGaugeValue Length="0.6" ShowValue=@RadzenRadialGaugeShowValue>
                            <Template Context="pointer">
                                <h4>
                                    @pointer.Value <sup>sec</sup>
                                </h4>
                            </Template>
                        </RadzenRadialGaugeScalePointer>
                        <RadzenRadialGaugeScaleRange From="0" To="@(_Exercise.Duration.Seconds == 0 ? 1D : _Exercise.Duration.Seconds)" Fill="blue" />
                    </RadzenRadialGaugeScale>
                </RadzenRadialGauge>
            </div>
            <div class="row">
                <div class="btn-group" role="group" aria-label="Timer Control">
                    <button type="button" class="btn btn-primary col-sm-2" disabled=@(_timerOperation.CanBeStarted ? false : true) @onclick="StartTimer">Start</button>
                    <button type="button" class="btn btn-primary col-sm-2" disabled=@(_timerOperation.IsRecurring ? false : true) @onclick="PauseTimer">Pause</button>
                    <button type="button" class="btn btn-primary col-sm-2" disabled=@(_timerOperation.IsPaused ? false : true) @onclick="ResumeTimer">Resume</button>
                    <button type="button" class="btn btn-primary col-sm-2" disabled=@(_timerOperation.IsRecurring ? false : true) @onclick="StopTimer">Stop</button>
                    <button type="button" class="btn btn-primary col-sm-2" disabled=@(_timerOperation.IsRecurring ? false : true) @onclick="NextExercise">Next</button>
                </div>
            </div>
        </div>
        <div class="col">
            <div class="col">
                <h5><b>Workout:</b> @_Workout.Heading</h5>
                <p><b>Description:</b> @_Workout.Description</p>
                <div class="row">
                    <div class="col">
                        <p><b>Main Goal:</b> @_Workout.MainGoal</p>
                        <p><b>Training Level:</b> @_Workout.TrainingLevel</p>
                        <p><b>Program Duration:</b> @_Workout.ProgramDuration</p>
                        <p><b>Days Per Week:</b> @_Workout.DaysPerWeek</p>
                    </div>
                    <div class="col">
                        <p><b>Time Per Workout:</b> @_Workout.TimePerWorkout</p>
                        <p><b>Equipment:</b> @_Workout.Equipment</p>
                        <p><b>Author:</b> @_Workout.Author</p>
                        <p><b>Source:</b> <a href="@_Workout.Link" target="_blank">Workout Link</a></p>
                    </div>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Exercise</th>
                            <th scope="col">Sets</th>
                            <th scope="col">Reps</th>
                            <th scope="col">Duration</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var exercise in _Workout.Exercises)
                        {
                            <tr>
                            <th scope="row" visi>@exercise.Id</th>
                            <td>@exercise.Name</td>
                            <td>@exercise.Sets</td>
                            <td>@exercise.Reps</td>
                            <td>@exercise.Duration</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public string? Title { get; set; }
    [Parameter]
    public int Id { get; set; }

    private eoifitnesswasm.Shared.Workout? _Workout { get; set; }
    private eoifitnesswasm.Shared.Exercise? _Exercise { get; set; }
    private bool RadzenRadialGaugeShowValue { get { return true; } }
    private double _RadzenRadialGaugeValue { get; set; }
    private double RadzenRadialGaugeValue
    {
        get
        {
            return _RadzenRadialGaugeValue;
        }
        set
        {
            if (value != null)
            {
                _RadzenRadialGaugeValue = value;
            }
            else
            {
                _RadzenRadialGaugeValue = 0D;
            }
        }
    }
    private IEnumerable<GaugeTickPosition> tickPositions { get { return Enum.GetValues(typeof(GaugeTickPosition)).Cast<GaugeTickPosition>(); } }
    private GaugeTickPosition tickPosition { get { return GaugeTickPosition.Inside; } }
    private RecurringOperation? _timerOperation { get; set; }
    private RecurringOperation? _exerciseOperation { get; set; }
    private TimeSpan _Timer { get; set; }
    private int _elapsedSeconds { get; set; }
    private int _exerciseElapsedSeconds { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var json = await Http.GetStringAsync($"data/{Title}.json");
        _Workout = JsonConvert.DeserializeObject<eoifitnesswasm.Shared.WorkoutsDB>(json).Workouts.Where(w => w.Id == Id).FirstOrDefault();
        _Exercise = _Workout.Exercises.FirstOrDefault();

        _timerOperation = new("timer");
        _timerOperation.Operation = IncrementTimer;
        _timerOperation.StatusChanged += TimerOperationStatusChanged;

        _exerciseOperation = new("exerciseTimer");
        _exerciseOperation.Operation = ExerciseIncrementTimer;
        _exerciseOperation.StatusChanged += ExerciseOperationStatusChanged;
    }

    private void StartTimer()
    {
        Recurop.StartRecurring(_timerOperation, TimeSpan.FromSeconds(1));
        Recurop.StartRecurring(_exerciseOperation, TimeSpan.FromSeconds(1));
    }

    private void PauseTimer()
    {
        Recurop.PauseRecurring(_timerOperation);
        if (_exerciseElapsedSeconds > 0)
        {
            Recurop.PauseRecurring(_exerciseOperation);
        }
    }

    private void ResumeTimer()
    {
        Recurop.ResumeRecurring(_timerOperation);
        if (_exerciseElapsedSeconds > 0)
        {
            Recurop.ResumeRecurring(_exerciseOperation);
        }
    }

    private void StopTimer()
    {
        Recurop.CancelRecurring(_timerOperation);
        if (_exerciseElapsedSeconds > 0)
        {
            Recurop.CancelRecurring(_exerciseOperation);
        }
    }

    private void NextExercise()
    {
        Recurop.CancelRecurring(_exerciseOperation);
        if (_Exercise.Id < _Workout.Exercises.OrderByDescending(e => e.Id).FirstOrDefault().Id)
        {
            _Exercise = _Workout.Exercises.Where(e => e.Id == (_Exercise.Id + 1)).FirstOrDefault();
            if (_Exercise.Duration > new TimeSpan(0, 0, 0))
            {
                Recurop.StartRecurring(_exerciseOperation, TimeSpan.FromSeconds(1));
            }
        }
        else
        {
            StopTimer();
        }
        StateHasChanged();
    }

    private void IncrementTimer()
    {
        _elapsedSeconds++;
        _Timer = TimeSpan.FromSeconds(_elapsedSeconds);
        StateHasChanged();
    }

    private void ExerciseIncrementTimer()
    {
        if (_exerciseElapsedSeconds < _Exercise.Duration.Seconds)
        {
            _exerciseElapsedSeconds++;
            RadzenRadialGaugeValue = Convert.ToDouble(TimeSpan.FromSeconds(_exerciseElapsedSeconds).Seconds);
        }
        else
        {
            Recurop.CancelRecurring(_exerciseOperation);
            if (_Exercise.Id < _Workout.Exercises.OrderByDescending(e => e.Id).FirstOrDefault().Id)
            {
                _Exercise = _Workout.Exercises.Where(e => e.Id == (_Exercise.Id + 1)).FirstOrDefault();
                if (_Exercise.Duration > new TimeSpan(0, 0, 0))
                {
                    Recurop.StartRecurring(_exerciseOperation, TimeSpan.FromSeconds(1));
                }
            }
            else
            {
                StopTimer();
            }
        }

        StateHasChanged();
    }

    private void TimerOperationStatusChanged()
    {
        switch (_timerOperation.Status)
        {
            case RecurringOperationStatus.Idle:
                break;
            case RecurringOperationStatus.Paused:
                break;
            case RecurringOperationStatus.Executing:
                break;
            case RecurringOperationStatus.Cancelled:
                _Timer = TimeSpan.Zero;
                _elapsedSeconds = 0;
                _Exercise = _Workout.Exercises.FirstOrDefault();
                break;
            default:
                break;
        }
    }

    private void ExerciseOperationStatusChanged()
    {
        switch (_exerciseOperation.Status)
        {
            case RecurringOperationStatus.Idle:
                break;
            case RecurringOperationStatus.Paused:
                break;
            case RecurringOperationStatus.Executing:
                break;
            case RecurringOperationStatus.Cancelled:
                RadzenRadialGaugeValue = 0;
                _exerciseElapsedSeconds = 0;
                break;
            default:
                break;
        }
    }

    public void Dispose()
    {
        Recurop.CancelRecurring(_timerOperation);
        Recurop.CancelRecurring(_exerciseOperation);
    }
}
